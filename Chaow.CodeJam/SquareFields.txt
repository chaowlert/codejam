open System
open System.IO
open System.Linq
open System.Collections.Generic

let solve sets sqrs =
    let matchSqr size =
        let rec matchSqrX sets sqrs =
            if Set.count sets <= sqrs then
                Seq.singleton size
            elif sqrs = 0 then
                Seq.empty
            else 
                let x,y = Set.minElement sets
                let ys1 = sets |> Seq.filter (fun (x2,y2) -> x2 > x && x2 <= x+size &&
                                                             y2 >= y-size && y2 <= y)
                               |> Seq.map snd
                               |> Set.ofSeq
                let ys2 = sets |> Seq.filter (fun (x2,y2) -> x2 > x && x2 <= x+size &&
                                                             y2 >= y && y2 <= y+size)
                               |> Seq.map snd
                               |> Seq.map (fun y2 -> y2 - size)
                               |> Set.ofSeq
                let ys = ys1 + ys2 + Set.singleton y
                seq {
                   for y in ys do
                   let coveredSet = sets |> Seq.filter (fun (x2,y2) -> x2 >= x && x2 <= x+size &&
                                                                       y2 >= y && y2 <= y+size)
                                         |> Set.ofSeq
                   for i in matchSqrX (sets-coveredSet) (sqrs-1) do
                   yield i
                }
        matchSqrX sets sqrs

    let rec binarySearch min max =
        if min = max then
            max
        else 
            let mid = (min + max) / 2
            let result = matchSqr mid
            if Seq.isEmpty result then
                binarySearch (mid+1) max
            else
                binarySearch min mid
    binarySearch 1 64000 |> string

[<EntryPoint>]
let main argv = 
    use input = new StreamReader(argv.[0])
    use output = new StreamWriter(argv.[1])

    let cases = input.ReadLine() |> int
    for i = 1 to cases do
        let text = input.ReadLine()
        let nums = text.Split ' '
        let dots = int nums.[0]
        let sqrs = int nums.[1]
        let setInit i =
            let text = input.ReadLine()
            let nums = text.Split ' '
            int nums.[0], int nums.[1]
        let sets = Seq.init dots setInit |> Set.ofSeq

        let answer = solve sets sqrs

        printfn "Case #%i: %s" i answer
        fprintfn output "Case #%i: %s" i answer

    input.Close()
    output.Close()

    if System.Diagnostics.Debugger.IsAttached then
        Console.ReadLine() |> ignore

    0 
